[{"/Users/dominik/WebstormProjects/temalabmatui/src/index.js":"1","/Users/dominik/WebstormProjects/temalabmatui/src/reportWebVitals.js":"2","/Users/dominik/Documents/GitHub/temalabor/frontend/src/index.js":"3","/Users/dominik/Documents/GitHub/temalabor/frontend/src/reportWebVitals.js":"4"},{"size":21924,"mtime":1637064403759,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1634672336230,"results":"7","hashOfConfig":"6"},{"size":17516,"mtime":1637584811101,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1634672336230,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"6mkn6",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"j2sb1v",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/dominik/WebstormProjects/temalabmatui/src/index.js",["22","23","24","25","26","27","28","29","30","31","32","33","34"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport {Box, createTheme, Grid} from \"@material-ui/core\";\n\nclass Todo extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            id:this.props.id,\n            columnid:this.props.columnid,\n            name:this.props.name,\n            description:this.props.description,\n            open:false,\n            namemodifyvalue:this.props.name,\n            descriptionmodifyvalue:this.props.description\n\n        }\n\n    }\n    closeModify(){\n        let namemod=this.state.namemodifyvalue\n        let desmod=this.state.descriptionmodifyvalue\n        this.setState({\n            open:false,\n            name:namemod,\n            description:desmod\n        })\n\n        const item={\n            id:this.state.id,\n            columnID:this.state.columnid,\n            name:this.state.namemodifyvalue,\n            description:this.state.descriptionmodifyvalue,\n        //    position:1,\n        //    column:null\n        }\n        this.fetchmodify(item)\n\n    }\n\n    fetchmodify(item){\n        fetch('/api/todoitems/'+[this.state.id], {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            },\n            body: JSON.stringify(item)\n        }).catch(error => console.error('Unable to add item.', error))\n    }\n\n    render() {\n        return(\n            <div className=\"margin\">\n                <Card sx={{maxWidth:300}}>\n                    <CardContent>\n                        <Typography>\n                            Név:{this.state.name}\n                        </Typography>\n                        <Typography>\n                            Leírás:{this.state.description}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button startIcon={<ArrowUpwardIcon/>} onClick={()=>this.props.updataline(this.state.id)}/>\n                        <Button startIcon={<ArrowDownwardIcon/>} onClick={()=>this.props.downdataline(this.state.id)} />\n                        <Button startIcon={<DeleteIcon/>} onClick={()=>this.props.emptydataline(this.state.id)}/>\n                        <Button sx={{width:300}} startIcon={<AddCircleIcon/>} onClick={()=>this.setState({open:true})}/>\n                        <Dialog open={this.state.open} alignItems=\"center\">\n                            <DialogTitle>Modify a Task</DialogTitle>\n                            <DialogContentText >To modify a Task please edit the fields below</DialogContentText>\n                            <DialogContent>\n                                <form onSubmit={()=>this.closeModify()}>\n                                    <label>\n                                        Task:\n                                        <TextField type=\"text\" value={this.state.namemodifyvalue} onChange={(e)=>this.setState({namemodifyvalue: e.target.value})} />\n                                        Description:\n                                        <TextField type=\"text\" value={this.state.descriptionmodifyvalue} onChange={(e)=>this.setState({descriptionmodifyvalue: e.target.value})} />\n                                    </label>\n                                    <div> <Button onClick={()=>this.setState({open:false})}>Cancel</Button>\n                                        <Button type=\"submit\" variant=\"text\" value=\"Submit\">Modify</Button>\n                                    </div>\n                                </form>\n                            </DialogContent>\n                        </Dialog>\n                    </CardActions>\n                </Card>\n            </div>\n        )\n    }\n}\n\n\n\nclass ProjectBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            todos:Array().fill(''),\n            id:this.props.value,\n            datalines:Array().fill(''),\n            datas:Array().fill(''),\n            ids:Array().fill(''),\n            opens:Array().fill(false),\n            test:'testname',\n            value:'',\n            value2:'',\n            valuemodify:'aaaaa',\n            value2modify:'bbbbb',\n            count:0,\n            open:false,\n            modifydx:0,\n            init:false,\n            max:false,\n            maxid:0\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSubmitmodify = this.handleSubmitmodify.bind(this);\n    }\n\n    handleClickOpenmodify(dx){\n        let boolarray=this.state.opens\n        boolarray[dx]=true\n        let array1=this.state.datalines\n        let array2=this.state.datas\n        this.setState({opens:boolarray,\n        valuemodify:array1[dx],\n            value2modify:array2[dx],\n            modifydx:dx\n        })\n    }\n    handleClosemodify(dx){\n        let boolarray=this.state.opens\n        boolarray[dx]=false\n        this.setState({opens:boolarray})\n    }\n\n\n    initlines(){\n        if(this.state.init===false) {\n            this.setState({init:true})\n            const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.adddatalines(data))\n                .catch(error => console.error('Unable to get items.', error));\n        }\n    }\n    adddatalines(data){\n        var k=0\n        let todolist=[]\n        let cnt=this.state.count\n        for(k=0;k<data.length;k++){\n            if(data[k].columnID===this.state.id){\n                console.log(data[k].name)\n                todolist.push(<Todo name={data[k].name}\n                                    description={data[k].description}\n                                    id={data[k].id}\n                                    columnid={data[k].columnID}\n                                 downdataline={(i)=>this.downdataline(i)}\n                                 updataline={(i)=>this.updataline(i)}\n                                 emptydataline={(i)=>this.emptydataline(i)}\n\n                />)\n                cnt++\n                }\n            }\n        this.setState({todos:todolist,count:cnt})\n\n        }\n\n    getmaxid(){\n      /*  if(this.state.max===false) {\n            const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.maxid(data))\n                .catch(error => console.error('Unable to get items.', error));\n        }\n\n\n       */\n        if(this.state.max===false){\n            const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.maxid(data))\n                .catch(error => console.error('Unable to get items.', error));\n        }\n\n        setTimeout(() => {  const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.maxid(data))\n                .catch(error => console.error('Unable to get items.', error)); }, 5000);\n    }\n    maxid(data){\n        var dx=0;\n        for(var k=0;k<data.length;k++){\n            dx=data[k].id\n        }\n        this.setState({\n            maxid:dx,\n            max:true\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let newarray=this.state.datalines\n        let newarray2=this.state.datas\n        let newarray3=this.state.ids\n        let prevcount=this.state.count\n        newarray[this.state.count]=this.state.value\n        newarray2[this.state.count]=this.state.value2\n        newarray3[this.state.count]=this.state.maxid+1\n        let todoslist=this.state.todos\n        todoslist.push(<Todo name={this.state.value}\n                            description={this.state.value2}\n                            id={this.state.maxid+1}\n                             columnid={this.state.id}\n                            downdataline={(i)=>this.downdataline(i)}\n                            updataline={(i)=>this.updataline(i)}\n                            emptydataline={(i)=>this.emptydataline(i)}\n        />)\n        const item={\n            id:this.state.maxid+1,\n            columnID:this.state.id,\n            name:this.state.value,\n            description:this.state.value2,\n          //  position:1,\n         //   column:null\n        }\n        fetch('api/todoitems', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n            })\n            .then(response => response.json())\n            .catch(error => console.error('Unable to add item.', error))\n        this.setState({\n            count:prevcount+1,\n            datalines:newarray,\n            datas:newarray2,\n            ids:newarray3,\n            value:'',\n            value2:'',\n            open:false,\n            max:false,\n            todos:todoslist\n        })\n\n\n\n    }\n\n\n    handleSubmitmodify(event) {\n        //this.setState({output: this.state.value })\n        event.preventDefault();\n        let newarray=this.state.datalines\n        let newarray2=this.state.datas\n        let dx=this.state.modifydx\n        newarray[dx]=this.state.valuemodify\n        newarray2[dx]=this.state.value2modify\n        let id=this.state.ids[dx]\n\n        const item={\n\n        }\n        fetch('/api/todoitems/'+[id], {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            },\n            body: JSON.stringify({\n                    id:id,\n                    columnID:this.state.id,\n                    name:this.state.valuemodify,\n                    description:this.state.value2modify,\n                 //   position:1,\n                //    column:null\n            })\n        }).catch(error => console.error('Unable to add item.', error))\n        /*    .then(()=>this.setState({\n            datalines:newarray,\n            datas:newarray2,\n            valuemodify:'',\n        }))*/\n\n\n        this.handleClosemodify(dx)\n    }\n\n    emptydataline(i){\n\n        fetch(\"/api/todoitems/\"+i, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n        setTimeout(() => { this.setState({todos:Array().fill(''),init:false})},500)\n    }\n    updataline(k){\n        let i=0\n        const uri = '/api/todoitems';\n        fetch(uri)\n            .then(response => response.json())\n            .then(data => this.toMoveUP(data,k))\n            .catch(error => console.error('Unable to get items.', error));\n    }\n    toMoveUP(data,k){\n        let dx\n        let datalist=[]\n        for(let d=0;d<data.length;d++){\n            if(data[d].columnID===this.state.id){\n                datalist.push(data[d])\n            }\n        }\n        for(let i=0;i<datalist.length;i++){\n            if(datalist[i].id===k){\n                dx=i\n            }\n        }\n        if(dx===0)\n            return\n\n        const itemfelso={\n            id:datalist[dx].id,\n            columnID:this.state.id,\n            name:datalist[dx-1].name,\n            description:datalist[dx-1].description,\n         //   position:1,\n         //   column:null\n        }\n\n        const itemalso={\n            id:datalist[dx-1].id,\n            columnID:this.state.id,\n            name:datalist[dx].name,\n            description:datalist[dx].description,\n         //   position:1,\n         //   column:null\n        }\n        this.fetchback(itemfelso.id,itemfelso,itemalso.id,itemalso)\n\n        setTimeout(() => { this.setState({todos:Array().fill(''),init:false})},500)\n    }\n\n    downdataline(k){\n        let i=0\n        const uri = '/api/todoitems';\n        fetch(uri)\n            .then(response => response.json())\n            .then(data => this.toMoveDOWN(data,k))\n            .catch(error => console.error('Unable to get items.', error));\n    }\n\n    toMoveDOWN(data,k){\n        let dx\n        let datalist=[]\n        for(let d=0;d<data.length;d++){\n            if(data[d].columnID===this.state.id){\n                datalist.push(data[d])\n            }\n        }\n        for(let i=0;i<datalist.length;i++){\n            if(datalist[i].id===k){\n                dx=i\n            }\n        }\n        if(dx===datalist.length)\n            return\n\n        const itemfelso={\n            id:datalist[dx].id,\n            columnID:this.state.id,\n            name:datalist[dx+1].name,\n            description:datalist[dx+1].description,\n         //   position:1,\n         //   column:null\n        }\n\n        const itemalso={\n            id:datalist[dx+1].id,\n            columnID:this.state.id,\n            name:datalist[dx].name,\n            description:datalist[dx].description,\n          //  position:1,\n          //  column:null\n        }\n        this.fetchback(itemfelso.id,itemfelso,itemalso.id,itemalso)\n\n        setTimeout(() => { this.setState({todos:Array().fill(''),init:false})},500)\n    }\n\n    //direction 0 downdata, 1 updata\n    /*\n    toMove(data,k,direction){\n        let dx\n        let datalist=[]\n        for(let d=0;d<data.length;d++){\n            datalist.push(data[d])\n        }\n        for(let i=0;i<datalist.length;i++){\n            if(datalist[i].id===k){\n                dx=i\n            }\n        }\n        const itemfelso={\n            id:datalist[dx].id,\n            columnID:this.state.id,\n            name:datalist[dx-1].name,\n            description:datalist[dx-1].description,\n            position:1,\n            column:null\n        }\n        const itemfofel={\n            id:datalist[dx-1].id,\n            columnID:this.state.id,\n            name:datalist[dx].name,\n            description:datalist[dx].description,\n            position:1,\n            column:null\n        }\n        const itemfo={\n            id:datalist[dx+1].id,\n            columnID:this.state.id,\n            name:datalist[dx].name,\n            description:datalist[dx].description,\n            position:1,\n            column:null\n        }\n        const itemalso={\n            id:datalist[dx].id,\n            columnID:this.state.id,\n            name:datalist[dx+1].name,\n            description:datalist[dx+1].description,\n            position:1,\n            column:null\n        }\n        if(direction==2){\n            this.fetchback(itemfo.id,itemfo,itemalso.id,itemalso)\n        }\n        if(direction==1){\n            this.fetchback(itemfofel.id,itemfofel,itemfelso.id,itemfelso)\n        }\n        this.setState({todos:Array().fill(''),init:false})\n    }\n    */\n\n    fetchback(i,item,i2,item2){\n        fetch(\"/api/todoitems/\"+i, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        }).catch(error => console.error('Unable to add item.', error))\n        fetch(\"/api/todoitems/\"+i2, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item2)\n        }).catch(error => console.error('Unable to add item.', error))\n    }\n\n\n    renderdatalines(){\n        let renderlines=[]\n        if(this.state.init===false)\n            return\n        for(let k=0;k<10;k++){\n            renderlines.push(this.state.todos[k])\n        }\n        return renderlines\n    }\n    render() {\n\n        return (\n            <Box>\n                {this.initlines()}\n                {this.getmaxid()}\n                <Button sx={{width:300}} startIcon={<AddCircleIcon/>} onClick={()=>this.setState({open:true})}/>\n                <Dialog open={this.state.open} alignItems=\"center\">\n                    <DialogTitle>Add a Task</DialogTitle>\n                    <DialogContentText >To add a new Task please fill the fields below</DialogContentText>\n                    <DialogContent>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Task:\n                            <TextField required type=\"text\" value={this.state.value} onChange={(e)=>this.setState({value: e.target.value})} />\n                            Description:\n                            <TextField type=\"text\" value={this.state.value2} onChange={(e)=>this.setState({value2: e.target.value})} />\n                        </label>\n                        <div> <Button onClick={()=>this.setState({open:false})}>Cancel</Button><Button type=\"submit\" variant=\"text\" value=\"Submit\">Add</Button></div>\n                    </form>\n                    </DialogContent>\n                </Dialog>\n                {this.renderdatalines()}\n            </Box>\n        );\n    }\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            numberOfprojects:0,\n            projectArray:Array(3).fill(''),\n            maxprojectsnumber:10,\n            init:false,\n            maxid:0,\n        }\n    }\n\n    fetchcolumn(i){\n        const item={\n            ID:i,\n           // TodoItems:null,\n        }\n        fetch('api/columns', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        })\n            .then(response => response.json())\n            .catch(error => console.error('Unable to add item.', error))\n    }\n\n    addProject(dx){\n        let idx=this.state.maxid+1\n        let projects= []\n        for(let j=0;j<this.state.numberOfprojects;j++){\n            projects.push(this.state.projectArray[j])\n        }\n        projects.push(\n            <Grid item xs={12} md={3}>\n                    <ProjectBox value={(idx)} />\n            </Grid>\n\n            )\n        this.fetchcolumn(idx)\n        this.setState({\n            projectArray:projects,\n            numberOfprojects:this.state.numberOfprojects+1,\n            maxid:idx\n        })\n    }\n    addProjectwithoutfetch(dx){\n        let max=this.state.max\n        let projects= []\n        for(let j=0;j<this.state.numberOfprojects;j++){\n            projects.push(this.state.projectArray[j])\n        }\n        projects.push(\n            <Grid item xs={12} md={3}>\n                <ProjectBox value={(dx)} />\n            </Grid>\n\n        )\n        this.setState({\n            projectArray:projects,\n            numberOfprojects:this.state.numberOfprojects+1,\n            maxid:dx\n        })\n    }\n    clearProjects(){\n        this.deletealltodos()\n        this.setState({\n            projectArray:Array(0),\n        })\n    }\n\n    addlist(data){\n            for (var k = 0; k < data.length; k++) {\n                this.addProjectwithoutfetch(data[k].id);\n            }\n    }\n    initcolumns(){\n        if(this.state.init===false) {\n            this.setState({init:true})\n            const uri = '/api/columns';\n                fetch(uri)\n                    .then(response => response.json())\n                    .then(data => this.addlist(data))\n                    .catch(error => console.error('Unable to get items.', error));\n        }\n    }\n\n    maxid(data){\n        let dx=0;\n        for(let k=0;k<data.length;k++){\n            dx=data[k].id\n        }\n        this.setState({\n            maxidtodo:dx,\n        })\n        for(let l=1;l<=dx;l++){\n            this.deletetodo(l)\n        }\n        for(let h=1;h<=this.state.maxid;h++){\n            this.deletecolumns(h)\n        }\n        this.setState({numberOfprojects:0})\n    }\n\n    deletecolumns(h){\n        fetch(\"/api/columns/\"+h, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n    }\n    deletetodo(id){\n        fetch(\"/api/todoitems/\"+id, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n    }\n    deletealltodos(){\n        const uri = '/api/todoitems';\n        fetch(uri)\n            .then(response => response.json())\n            .then(data => this.maxid(data))\n            .catch(error => console.error('Unable to get items.', error));\n    }\n\n\n    render() {\n        return (\n            <div >\n                <Box >\n                    <Grid container spacing={2}>\n                        {this.initcolumns()}\n                        {this.state.projectArray}\n                        <Grid item xs={12} md={3}>\n                            <Button variant=\"text\" onClick={()=>this.addProject(this.state.max)}> Add Project</Button>\n                            <Button variant=\"text\" onClick={()=>this.clearProjects()}> Clear Projects</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n\n\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Main />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","/Users/dominik/WebstormProjects/temalabmatui/src/reportWebVitals.js",[],["35","36"],"/Users/dominik/Documents/GitHub/temalabor/frontend/src/index.js",["37","38","39","40","41","42"],"/Users/dominik/Documents/GitHub/temalabor/frontend/src/reportWebVitals.js",[],["43","44"],{"ruleId":"45","severity":1,"message":"46","line":20,"column":14,"nodeType":"47","messageId":"48","endLine":20,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":115,"column":19,"nodeType":"51","messageId":"52","endLine":115,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":117,"column":23,"nodeType":"51","messageId":"52","endLine":117,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":118,"column":19,"nodeType":"51","messageId":"52","endLine":118,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":119,"column":17,"nodeType":"51","messageId":"52","endLine":119,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":120,"column":19,"nodeType":"51","messageId":"52","endLine":120,"endColumn":26},{"ruleId":"45","severity":1,"message":"53","line":287,"column":15,"nodeType":"47","messageId":"48","endLine":287,"endColumn":19},{"ruleId":"49","severity":1,"message":"50","line":320,"column":49,"nodeType":"51","messageId":"52","endLine":320,"endColumn":56},{"ruleId":"45","severity":1,"message":"54","line":323,"column":13,"nodeType":"47","messageId":"48","endLine":323,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":365,"column":49,"nodeType":"51","messageId":"52","endLine":365,"endColumn":56},{"ruleId":"45","severity":1,"message":"54","line":369,"column":13,"nodeType":"47","messageId":"48","endLine":369,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":412,"column":49,"nodeType":"51","messageId":"52","endLine":412,"endColumn":56},{"ruleId":"45","severity":1,"message":"55","line":576,"column":13,"nodeType":"47","messageId":"48","endLine":576,"endColumn":16},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"45","severity":1,"message":"46","line":20,"column":14,"nodeType":"47","messageId":"48","endLine":20,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":115,"column":19,"nodeType":"51","messageId":"52","endLine":115,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":231,"column":49,"nodeType":"51","messageId":"52","endLine":231,"endColumn":56},{"ruleId":"45","severity":1,"message":"54","line":234,"column":13,"nodeType":"47","messageId":"48","endLine":234,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":272,"column":49,"nodeType":"51","messageId":"52","endLine":272,"endColumn":56},{"ruleId":"49","severity":1,"message":"50","line":314,"column":49,"nodeType":"51","messageId":"52","endLine":314,"endColumn":56},{"ruleId":"56","replacedBy":"60"},{"ruleId":"58","replacedBy":"61"},"no-unused-vars","'createTheme' is defined but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","'item' is assigned a value but never used.","'i' is assigned a value but never used.","'max' is assigned a value but never used.","no-native-reassign",["62"],"no-negated-in-lhs",["63"],["62"],["63"],"no-global-assign","no-unsafe-negation"]