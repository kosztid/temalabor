{"ast":null,"code":"var _jsxFileName = \"/Users/dominik/WebstormProjects/temalabmatui/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Stack from '@mui/material/Stack';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport { Box, createTheme, Grid } from \"@material-ui/core\";\nimport { Item } from \"@mui-treasury/components/flex\";\n/*\nclass FormClass extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n        };\n        this.doSomethingWithInput = this.doSomethingWithInput.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleTextFieldChange(event) {\n        event.preventDefault();\n        this.setState({\n            value: event.target.value,\n        });\n    }\n\n    doSomethingWithInput(event) {\n        event.preventDefault();\n        this.setState({\n            value:event.target.value\n        })\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event){\n        this.setState({\n            value:this.state.value\n        })\n        event.preventDefault();\n    }\n    render() {\n        return(\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Task:\n                        <input className=\"inputfields\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" className=\"inputbutton\" value=\"Submit\"/>\n                </form>\n            </>\n        );\n    }\n}\n\nclass Myform extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            value:''\n        }\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                <label>\n                    Task:\n                    <input className=\"inputfields\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" className=\"inputbutton\" value=\"Submit\"/>\n            </form>\n            </div>\n\n    )\n    }\n}\n\n\nexport default function FormDialog(props) {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmit = (value) => {\n        setOpen(false);\n    };\n    return (\n        <div>\n            <Button startIcon={<AddCircleIcon/>} onClick={handleClickOpen}/>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Subscribe</DialogTitle>\n                <DialogContent>\n                    <FormClass/>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button onClick={handleClose}>Add</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\nclass Task extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state={\n            name:'TestName',\n            description:'sometext',\n            deadline:'2000-12-12',\n            selectedvalue:'',\n            open:false,\n        }\n    }\n\n    AddTest(newname){\n        this.setState({\n            name:newname\n        })\n    }\n    render(){\n        return(\n            <Card sx={{maxWidth:300}}>\n                <CardContent>\n                    <Typography>\n                        NÃ©v:{this.props.value}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button startIcon={<ArrowUpwardIcon/>}/>\n                    <Button startIcon={<ArrowDownwardIcon/>} />\n                </CardActions>\n            </Card>\n\n\n        )\n    }\n}\nclass TaskContainer extends React.Component{\n    constructor() {\n        super();\n        this.state={\n            tasks:[],\n            taskcnt:0,\n        }\n    }\n\n    addTask(name,description,date){\n        let tasks=this.state.tasks\n        tasks.push() //TODO\n        this.setstate({\n            tasks:tasks,\n        })\n    }\n\n    render() {\n        return (\n            <label>\n                TESZT\n            </label>\n        );\n    }\n}\n\n\n\nclass Dataline extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    render(i){\n        return(\n            <button className=\"dataline\">\n                {this.props.value}\n            </button>\n        )\n    }\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.value,\n      datalines: Array().fill(''),\n      datas: Array().fill(''),\n      ids: Array().fill(''),\n      opens: Array().fill(false),\n      test: 'testname',\n      value: '',\n      value2: '',\n      valuemodify: 'aaaaa',\n      value2modify: 'bbbbb',\n      count: 0,\n      open: false,\n      modifydx: 0,\n      init: false,\n      max: false,\n      maxid: 0\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSubmitmodify = this.handleSubmitmodify.bind(this);\n  }\n\n  handleClickOpenmodify(dx) {\n    let boolarray = this.state.opens;\n    boolarray[dx] = true;\n    let array1 = this.state.datalines;\n    let array2 = this.state.datas;\n    this.setState({\n      opens: boolarray,\n      valuemodify: array1[dx],\n      value2modify: array2[dx],\n      modifydx: dx\n    });\n  }\n\n  handleClosemodify(dx) {\n    let boolarray = this.state.opens;\n    boolarray[dx] = false;\n    this.setState({\n      opens: boolarray\n    });\n  }\n\n  initlines() {\n    if (this.state.init === false) {\n      this.setState({\n        init: true\n      });\n      const uri = '/api/todoitems';\n      fetch(uri).then(response => response.json()).then(data => this.adddatalines(data)).catch(error => console.error('Unable to get items.', error));\n    }\n  }\n\n  adddatalines(data) {\n    var k = 0;\n\n    for (k = 0; k < data.length; k++) {\n      if (data[k].columnID === this.state.id) {\n        let newarray = this.state.datalines;\n        let newarray2 = this.state.datas;\n        let newarray3 = this.state.ids;\n        let prevcount = this.state.count;\n        newarray[this.state.count] = data[k].name;\n        newarray2[this.state.count] = data[k].description;\n        newarray3[this.state.count] = data[k].id;\n        this.setState({\n          count: prevcount + 1,\n          datalines: newarray,\n          datas: newarray2,\n          ids: newarray3\n        });\n      }\n    }\n  }\n\n  getmaxid() {\n    /*  if(this.state.max===false) {\n          const uri = '/api/todoitems';\n          fetch(uri)\n              .then(response => response.json())\n              .then(data => this.maxid(data))\n              .catch(error => console.error('Unable to get items.', error));\n      }\n       */\n    setTimeout(() => {\n      const uri = '/api/todoitems';\n      fetch(uri).then(response => response.json()).then(data => this.maxid(data)).catch(error => console.error('Unable to get items.', error));\n    }, 5000);\n  }\n\n  maxid(data) {\n    var dx = 0;\n\n    for (var k = 0; k < data.length; k++) {\n      dx = data[k].id;\n    }\n\n    this.setState({\n      maxid: dx,\n      max: true\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let newarray = this.state.datalines;\n    let newarray2 = this.state.datas;\n    let newarray3 = this.state.ids;\n    let prevcount = this.state.count;\n    newarray[this.state.count] = this.state.value;\n    newarray2[this.state.count] = this.state.value2;\n    newarray3[this.state.count] = this.state.maxid + 1;\n    const item = {\n      id: this.state.maxid + 1,\n      columnID: this.state.id,\n      name: this.state.value,\n      description: this.state.value2,\n      position: 1,\n      column: null\n    };\n    fetch('api/todoitems', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    }).then(response => response.json()).catch(error => console.error('Unable to add item.', error));\n    this.setState({\n      count: prevcount + 1,\n      datalines: newarray,\n      datas: newarray2,\n      ids: newarray3,\n      value: '',\n      value2: '',\n      open: false,\n      max: false\n    });\n  }\n\n  handleSubmitmodify(event) {\n    //this.setState({output: this.state.value })\n    event.preventDefault();\n    let newarray = this.state.datalines;\n    let newarray2 = this.state.datas;\n    let dx = this.state.modifydx;\n    newarray[dx] = this.state.valuemodify;\n    newarray2[dx] = this.state.value2modify;\n    let id = this.state.ids[dx];\n    const item = {};\n    fetch('/api/todoitems/' + [id], {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      body: JSON.stringify({\n        id: id,\n        columnID: this.state.id,\n        name: this.state.valuemodify,\n        description: this.state.value2modify,\n        position: 1,\n        column: null\n      })\n    }).catch(error => console.error('Unable to add item.', error));\n    /*    .then(()=>this.setState({\n        datalines:newarray,\n        datas:newarray2,\n        valuemodify:'',\n    }))*/\n\n    this.handleClosemodify(dx);\n  }\n\n  emptydataline(i) {\n    let datalinesnew = this.state.datalines;\n    let id = this.state.ids[i];\n    this.setState({\n      datalines: datalinesnew\n    });\n    fetch(\"/api/todoitems/\" + id, {\n      method: 'DELETE'\n    }).catch(error => console.error('Unable to delete item.', error));\n    this.reorderdatalines(i);\n    this.renderdatalines();\n  }\n\n  reorderdatalines(i) {\n    let datalinesnew = this.state.datalines;\n    let datasnew = this.state.datas;\n    let idsnew = this.state.ids;\n    let datacnt = this.state.count;\n    if (i >= datacnt) return;\n\n    for (let j = i; j < datacnt; j++) {\n      datalinesnew[j] = datalinesnew[j + 1];\n      datasnew[j] = datasnew[j + 1];\n      idsnew[j] = idsnew[j + 1];\n    }\n\n    this.setState({\n      datalines: datalinesnew,\n      datas: datasnew,\n      ids: idsnew,\n      count: datacnt - 1\n    });\n  }\n\n  updataline(i) {\n    let datalinesnew = this.state.datalines;\n    let datasnew = this.state.datas;\n    let idsnew = this.state.ids;\n    let buffer = datalinesnew[i - 1];\n    let buffer2 = datasnew[i - 1];\n    let buffer3 = idsnew[i - 1];\n    if (i === 0) return;\n    datalinesnew[i - 1] = datalinesnew[i];\n    datalinesnew[i] = buffer;\n    datasnew[i - 1] = datasnew[i];\n    datasnew[i] = buffer2;\n    const item = {\n      id: idsnew[i - 1],\n      columnID: this.state.id,\n      name: datalinesnew[i - 1],\n      description: datasnew[i - 1],\n      position: 1,\n      column: null\n    };\n    const item2 = {\n      id: idsnew[i],\n      columnID: this.state.id,\n      name: datalinesnew[i],\n      description: datasnew[i],\n      position: 1,\n      column: null\n    };\n    this.fetchback(idsnew[i], item2, idsnew[i - 1], item);\n    this.setState({\n      datalines: datalinesnew,\n      datas: datasnew,\n      ids: idsnew\n    });\n  }\n\n  downdataline(i) {\n    let datalinesnew = this.state.datalines;\n    let datasnew = this.state.datas;\n    let idsnew = this.state.ids;\n    let buffer = datalinesnew[i + 1];\n    let buffer2 = datasnew[i + 1];\n    if (i === 6 || this.state.count <= i + 1 || datalinesnew[i - 1] === null) return;\n    datalinesnew[i + 1] = datalinesnew[i];\n    datalinesnew[i] = buffer;\n    datasnew[i + 1] = datasnew[i];\n    datasnew[i] = buffer2;\n    const item = {\n      id: idsnew[i + 1],\n      columnID: this.state.id,\n      name: datalinesnew[i + 1],\n      description: datasnew[i + 1],\n      position: 1,\n      column: null\n    };\n    const item2 = {\n      id: idsnew[i],\n      columnID: this.state.id,\n      name: datalinesnew[i],\n      description: datasnew[i],\n      position: 1,\n      column: null\n    };\n    this.fetchback(idsnew[i], item2, idsnew[i + 1], item);\n    this.setState({\n      datalines: datalinesnew,\n      datas: datasnew,\n      ids: idsnew\n    });\n  }\n\n  fetchback(i, item, i2, item2) {\n    fetch(\"/api/todoitems/\" + i, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    }).catch(error => console.error('Unable to add item.', error));\n    fetch(\"/api/todoitems/\" + i2, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item2)\n    }).catch(error => console.error('Unable to add item.', error));\n  }\n\n  renderdatalines() {\n    let datalinesrender = [];\n\n    for (let i = 0; i < this.state.count; i++) {\n      let open = this.state.opens[i];\n      datalinesrender.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"margin\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            maxWidth: 300\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"N\\xE9v:\", this.state.datalines[i]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Le\\xEDr\\xE1s:\", this.state.datas[i]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 48\n              }, this),\n              onClick: () => this.updataline(i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 48\n              }, this),\n              onClick: () => this.downdataline(i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 48\n              }, this),\n              onClick: () => this.emptydataline(i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              sx: {\n                width: 300\n              },\n              startIcon: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 65\n              }, this),\n              onClick: () => this.handleClickOpenmodify(i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n              open: open,\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n                children: \"Modify a Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(DialogContentText, {\n                children: \"To modify a Task please edit the fields below\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n                children: /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: this.handleSubmitmodify,\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Task:\", /*#__PURE__*/_jsxDEV(TextField, {\n                      type: \"text\",\n                      value: this.state.valuemodify,\n                      onChange: e => this.setState({\n                        valuemodify: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 548,\n                      columnNumber: 45\n                    }, this), \"Description:\", /*#__PURE__*/_jsxDEV(TextField, {\n                      type: \"text\",\n                      value: this.state.value2modify,\n                      onChange: e => this.setState({\n                        value2modify: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 550,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 546,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => this.handleClosemodify(i),\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 552,\n                      columnNumber: 47\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      variant: \"text\",\n                      value: \"Submit\",\n                      children: \"Modify\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 553,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 545,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }, this));\n    }\n\n    return datalinesrender;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [this.initlines(), this.getmaxid(), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          width: 300\n        },\n        startIcon: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 53\n        }, this),\n        onClick: () => this.setState({\n          open: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Add a Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To add a new Task please fill the fields below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Task:\", /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                type: \"text\",\n                value: this.state.value,\n                onChange: e => this.setState({\n                  value: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 29\n              }, this), \"Description:\", /*#__PURE__*/_jsxDEV(TextField, {\n                type: \"text\",\n                value: this.state.value2,\n                onChange: e => this.setState({\n                  value2: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 581,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => this.setState({\n                  open: false\n                }),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"text\",\n                value: \"Submit\",\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 96\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 17\n      }, this), this.renderdatalines()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfprojects: 0,\n      projectArray: Array(3).fill(''),\n      maxprojectsnumber: 10,\n      init: false,\n      maxid: 0\n    };\n  }\n\n  fetchcolumn(i) {\n    const item = {\n      ID: i,\n      TodoItems: null\n    };\n    fetch('api/columns', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    }).then(response => response.json()).catch(error => console.error('Unable to add item.', error));\n  }\n\n  addProject(dx) {\n    let projects = [];\n\n    for (let j = 0; j < this.state.numberOfprojects; j++) {\n      projects.push(this.state.projectArray[j]);\n    }\n\n    projects.push( /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(ProjectBox, {\n        value: dx + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }, this));\n    this.fetchcolumn(dx + 1);\n    this.setState({\n      projectArray: projects,\n      numberOfprojects: this.state.numberOfprojects + 1\n    });\n  }\n\n  addProjectwithoutfetch(dx) {\n    let projects = [];\n\n    for (let j = 0; j < this.state.numberOfprojects; j++) {\n      projects.push(this.state.projectArray[j]);\n    }\n\n    projects.push( /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(ProjectBox, {\n        value: dx + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 13\n    }, this));\n    this.setState({\n      projectArray: projects,\n      numberOfprojects: this.state.numberOfprojects + 1\n    });\n  }\n\n  clearProjects() {\n    this.deletealltodos();\n    this.setState({\n      projectArray: Array(0)\n    });\n  }\n\n  addlist(data) {\n    for (var k = 0; k < data.length; k++) {\n      this.addProjectwithoutfetch(k);\n    }\n  }\n\n  initcolumns() {\n    if (this.state.init === false) {\n      this.setState({\n        init: true\n      });\n      const uri = '/api/columns';\n      fetch(uri).then(response => response.json()).then(data => this.addlist(data)).catch(error => console.error('Unable to get items.', error));\n    }\n  }\n\n  maxid(data) {\n    let dx = 0;\n\n    for (let k = 0; k < data.length; k++) {\n      dx = data[k].id;\n    }\n\n    this.setState({\n      maxid: dx\n    });\n\n    for (let l = 1; l <= dx; l++) {\n      this.deletetodo(l);\n    }\n\n    for (let h = 1; h <= this.state.numberOfprojects; h++) {\n      this.deletecolumns(h);\n    }\n\n    this.setState({\n      numberOfprojects: 0\n    });\n  }\n\n  deletecolumns(h) {\n    fetch(\"/api/columns/\" + h, {\n      method: 'DELETE'\n    }).catch(error => console.error('Unable to delete item.', error));\n  }\n\n  deletetodo(id) {\n    fetch(\"/api/todoitems/\" + id, {\n      method: 'DELETE'\n    }).catch(error => console.error('Unable to delete item.', error));\n  }\n\n  deletealltodos() {\n    const uri = '/api/todoitems';\n    fetch(uri).then(response => response.json()).then(data => this.maxid(data)).catch(error => console.error('Unable to get items.', error));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [this.initcolumns(), this.state.projectArray, /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 3,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"text\",\n              onClick: () => this.addProject(this.state.numberOfprojects),\n              children: \" Add Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"text\",\n              onClick: () => this.clearProjects(),\n              children: \" Clear Projects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 739,\n  columnNumber: 5\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/dominik/WebstormProjects/temalabmatui/src/index.js"],"names":["React","ReactDOM","reportWebVitals","Card","CardActions","CardContent","Button","Typography","ArrowUpwardIcon","ArrowDownwardIcon","AddCircleIcon","DeleteIcon","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Stack","Paper","styled","Box","createTheme","Grid","Item","ProjectBox","Component","constructor","props","state","id","value","datalines","Array","fill","datas","ids","opens","test","value2","valuemodify","value2modify","count","open","modifydx","init","max","maxid","handleSubmit","bind","handleSubmitmodify","handleClickOpenmodify","dx","boolarray","array1","array2","setState","handleClosemodify","initlines","uri","fetch","then","response","json","data","adddatalines","catch","error","console","k","length","columnID","newarray","newarray2","newarray3","prevcount","name","description","getmaxid","setTimeout","event","preventDefault","item","position","column","method","headers","body","JSON","stringify","emptydataline","i","datalinesnew","reorderdatalines","renderdatalines","datasnew","idsnew","datacnt","j","updataline","buffer","buffer2","buffer3","item2","fetchback","downdataline","i2","datalinesrender","push","maxWidth","width","e","target","render","Main","numberOfprojects","projectArray","maxprojectsnumber","fetchcolumn","ID","TodoItems","addProject","projects","addProjectwithoutfetch","clearProjects","deletealltodos","addlist","initcolumns","l","deletetodo","h","deletecolumns","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Stack from '@mui/material/Stack';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport {Box, createTheme, Grid} from \"@material-ui/core\";\nimport {Item} from \"@mui-treasury/components/flex\";\n/*\nclass FormClass extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n        };\n        this.doSomethingWithInput = this.doSomethingWithInput.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleTextFieldChange(event) {\n        event.preventDefault();\n        this.setState({\n            value: event.target.value,\n        });\n    }\n\n    doSomethingWithInput(event) {\n        event.preventDefault();\n        this.setState({\n            value:event.target.value\n        })\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event){\n        this.setState({\n            value:this.state.value\n        })\n        event.preventDefault();\n    }\n    render() {\n        return(\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Task:\n                        <input className=\"inputfields\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" className=\"inputbutton\" value=\"Submit\"/>\n                </form>\n            </>\n        );\n    }\n}\n\nclass Myform extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            value:''\n        }\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                <label>\n                    Task:\n                    <input className=\"inputfields\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" className=\"inputbutton\" value=\"Submit\"/>\n            </form>\n            </div>\n\n    )\n    }\n}\n\n\nexport default function FormDialog(props) {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmit = (value) => {\n        setOpen(false);\n    };\n    return (\n        <div>\n            <Button startIcon={<AddCircleIcon/>} onClick={handleClickOpen}/>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Subscribe</DialogTitle>\n                <DialogContent>\n                    <FormClass/>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button onClick={handleClose}>Add</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\nclass Task extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state={\n            name:'TestName',\n            description:'sometext',\n            deadline:'2000-12-12',\n            selectedvalue:'',\n            open:false,\n        }\n    }\n\n    AddTest(newname){\n        this.setState({\n            name:newname\n        })\n    }\n    render(){\n        return(\n            <Card sx={{maxWidth:300}}>\n                <CardContent>\n                    <Typography>\n                        NÃ©v:{this.props.value}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button startIcon={<ArrowUpwardIcon/>}/>\n                    <Button startIcon={<ArrowDownwardIcon/>} />\n                </CardActions>\n            </Card>\n\n\n        )\n    }\n}\nclass TaskContainer extends React.Component{\n    constructor() {\n        super();\n        this.state={\n            tasks:[],\n            taskcnt:0,\n        }\n    }\n\n    addTask(name,description,date){\n        let tasks=this.state.tasks\n        tasks.push() //TODO\n        this.setstate({\n            tasks:tasks,\n        })\n    }\n\n    render() {\n        return (\n            <label>\n                TESZT\n            </label>\n        );\n    }\n}\n\n\n\nclass Dataline extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    render(i){\n        return(\n            <button className=\"dataline\">\n                {this.props.value}\n            </button>\n        )\n    }\n}\n*/\nclass ProjectBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            id:this.props.value,\n            datalines:Array().fill(''),\n            datas:Array().fill(''),\n            ids:Array().fill(''),\n            opens:Array().fill(false),\n            test:'testname',\n            value:'',\n            value2:'',\n            valuemodify:'aaaaa',\n            value2modify:'bbbbb',\n            count:0,\n            open:false,\n            modifydx:0,\n            init:false,\n            max:false,\n            maxid:0\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSubmitmodify = this.handleSubmitmodify.bind(this);\n    }\n\n    handleClickOpenmodify(dx){\n        let boolarray=this.state.opens\n        boolarray[dx]=true\n        let array1=this.state.datalines\n        let array2=this.state.datas\n        this.setState({opens:boolarray,\n        valuemodify:array1[dx],\n            value2modify:array2[dx],\n            modifydx:dx\n        })\n    }\n    handleClosemodify(dx){\n        let boolarray=this.state.opens\n        boolarray[dx]=false\n        this.setState({opens:boolarray})\n    }\n\n\n    initlines(){\n        if(this.state.init===false) {\n            this.setState({init:true})\n            const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.adddatalines(data))\n                .catch(error => console.error('Unable to get items.', error));\n        }\n    }\n    adddatalines(data){\n        var k=0\n        for(k=0;k<data.length;k++){\n            if(data[k].columnID===this.state.id){\n                let newarray=this.state.datalines\n                let newarray2=this.state.datas\n                let newarray3=this.state.ids\n                let prevcount=this.state.count\n                newarray[this.state.count]=data[k].name\n                newarray2[this.state.count]=data[k].description\n                newarray3[this.state.count]=data[k].id\n                this.setState({\n                    count:prevcount+1,\n                    datalines:newarray,\n                    datas:newarray2,\n                    ids:newarray3\n                })\n            }\n        }\n    }\n\n    getmaxid(){\n      /*  if(this.state.max===false) {\n            const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.maxid(data))\n                .catch(error => console.error('Unable to get items.', error));\n        }\n\n\n       */\n        setTimeout(() => {  const uri = '/api/todoitems';\n            fetch(uri)\n                .then(response => response.json())\n                .then(data => this.maxid(data))\n                .catch(error => console.error('Unable to get items.', error)); }, 5000);\n    }\n    maxid(data){\n        var dx=0;\n        for(var k=0;k<data.length;k++){\n            dx=data[k].id\n        }\n        this.setState({\n            maxid:dx,\n            max:true\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let newarray=this.state.datalines\n        let newarray2=this.state.datas\n        let newarray3=this.state.ids\n        let prevcount=this.state.count\n        newarray[this.state.count]=this.state.value\n        newarray2[this.state.count]=this.state.value2\n        newarray3[this.state.count]=this.state.maxid+1\n        const item={\n            id:this.state.maxid+1,\n            columnID:this.state.id,\n            name:this.state.value,\n            description:this.state.value2,\n            position:1,\n            column:null\n        }\n        fetch('api/todoitems', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n            })\n            .then(response => response.json())\n            .catch(error => console.error('Unable to add item.', error))\n        this.setState({\n            count:prevcount+1,\n            datalines:newarray,\n            datas:newarray2,\n            ids:newarray3,\n            value:'',\n            value2:'',\n            open:false,\n            max:false\n        })\n\n\n\n    }\n\n\n    handleSubmitmodify(event) {\n        //this.setState({output: this.state.value })\n        event.preventDefault();\n        let newarray=this.state.datalines\n        let newarray2=this.state.datas\n        let dx=this.state.modifydx\n        newarray[dx]=this.state.valuemodify\n        newarray2[dx]=this.state.value2modify\n        let id=this.state.ids[dx]\n\n        const item={\n\n        }\n        fetch('/api/todoitems/'+[id], {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            },\n            body: JSON.stringify({\n                    id:id,\n                    columnID:this.state.id,\n                    name:this.state.valuemodify,\n                    description:this.state.value2modify,\n                    position:1,\n                    column:null\n            })\n        }).catch(error => console.error('Unable to add item.', error))\n        /*    .then(()=>this.setState({\n            datalines:newarray,\n            datas:newarray2,\n            valuemodify:'',\n        }))*/\n\n\n        this.handleClosemodify(dx)\n    }\n\n    emptydataline(i){\n        let datalinesnew=this.state.datalines\n        let id=this.state.ids[i]\n        this.setState({\n            datalines:datalinesnew,\n        })\n        fetch(\"/api/todoitems/\"+id, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n\n        this.reorderdatalines(i)\n        this.renderdatalines()\n    }\n    reorderdatalines(i){\n        let datalinesnew=this.state.datalines\n        let datasnew=this.state.datas\n        let idsnew=this.state.ids\n        let datacnt=this.state.count\n        if(i>=datacnt)\n            return\n        for(let j=i;j<datacnt;j++) {\n            datalinesnew[j] = datalinesnew[j + 1]\n            datasnew[j] = datasnew[j + 1]\n            idsnew[j] = idsnew[j + 1]\n        }\n        this.setState({\n            datalines: datalinesnew,\n            datas:datasnew,\n            ids:idsnew,\n            count:datacnt-1\n        })\n    }\n    updataline(i){\n        let datalinesnew=this.state.datalines\n        let datasnew=this.state.datas\n        let idsnew=this.state.ids\n        let buffer=datalinesnew[i-1]\n        let buffer2=datasnew[i-1]\n        let buffer3=idsnew[i-1]\n        if(i===0)\n            return\n        datalinesnew[i-1]=datalinesnew[i]\n        datalinesnew[i]=buffer\n        datasnew[i-1]=datasnew[i]\n        datasnew[i]=buffer2\n\n\n        const item={\n            id:idsnew[i-1],\n            columnID:this.state.id,\n            name:datalinesnew[i-1],\n            description:datasnew[i-1],\n            position:1,\n            column:null\n        }\n\n        const item2={\n            id:idsnew[i],\n            columnID:this.state.id,\n            name:datalinesnew[i],\n            description:datasnew[i],\n            position:1,\n            column:null\n        }\n        this.fetchback(idsnew[i],item2,idsnew[i-1],item)\n        this.setState({\n            datalines:datalinesnew,\n            datas:datasnew,\n            ids:idsnew\n        })\n    }\n    downdataline(i){\n        let datalinesnew=this.state.datalines\n        let datasnew=this.state.datas\n        let idsnew=this.state.ids\n        let buffer=datalinesnew[i+1]\n        let buffer2=datasnew[i+1]\n        if(i===6 || this.state.count<=i+1 || datalinesnew[i-1]===null)\n            return\n        datalinesnew[i+1]=datalinesnew[i]\n        datalinesnew[i]=buffer\n        datasnew[i+1]=datasnew[i]\n        datasnew[i]=buffer2\n        const item={\n            id:idsnew[i+1],\n            columnID:this.state.id,\n            name:datalinesnew[i+1],\n            description:datasnew[i+1],\n            position:1,\n            column:null\n        }\n\n        const item2={\n            id:idsnew[i],\n            columnID:this.state.id,\n            name:datalinesnew[i],\n            description:datasnew[i],\n            position:1,\n            column:null\n        }\n        this.fetchback(idsnew[i],item2,idsnew[i+1],item)\n        this.setState({\n            datalines:datalinesnew,\n            datas:datasnew,\n            ids:idsnew\n        })\n    }\n\n    fetchback(i,item,i2,item2){\n        fetch(\"/api/todoitems/\"+i, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        }).catch(error => console.error('Unable to add item.', error))\n        fetch(\"/api/todoitems/\"+i2, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item2)\n        }).catch(error => console.error('Unable to add item.', error))\n    }\n\n\n    renderdatalines(){\n        let datalinesrender=[]\n        for(let i=0; i<this.state.count; i++){\n            let open=this.state.opens[i]\n            datalinesrender.push(\n                <div className=\"margin\">\n                    <Card sx={{maxWidth:300}}>\n                        <CardContent>\n                            <Typography>\n                                NÃ©v:{this.state.datalines[i]}\n                            </Typography>\n                            <Typography>\n                                LeÃ­rÃ¡s:{this.state.datas[i]}\n                            </Typography>\n                        </CardContent>\n                        <CardActions>\n                            <Button startIcon={<ArrowUpwardIcon/>} onClick={()=>this.updataline(i)}/>\n                            <Button startIcon={<ArrowDownwardIcon/>} onClick={()=>this.downdataline(i)} />\n                            <Button startIcon={<DeleteIcon/>} onClick={() => this.emptydataline(i)}/>\n                            <Button sx={{width:300}} startIcon={<AddCircleIcon/>} onClick={()=>this.handleClickOpenmodify(i)}/>\n                            <Dialog open={open} alignItems=\"center\">\n                                <DialogTitle>Modify a Task</DialogTitle>\n                                <DialogContentText >To modify a Task please edit the fields below</DialogContentText>\n                                <DialogContent>\n                                    <form onSubmit={this.handleSubmitmodify}>\n                                        <label>\n                                            Task:\n                                            <TextField type=\"text\" value={this.state.valuemodify} onChange={(e)=>this.setState({valuemodify: e.target.value})} />\n                                            Description:\n                                            <TextField type=\"text\" value={this.state.value2modify} onChange={(e)=>this.setState({value2modify: e.target.value})} />\n                                        </label>\n                                        <div> <Button onClick={()=>this.handleClosemodify(i)}>Cancel</Button>\n                                            <Button type=\"submit\" variant=\"text\" value=\"Submit\">Modify</Button>\n                                        </div>\n                                    </form>\n                                </DialogContent>\n                            </Dialog>\n                        </CardActions>\n                    </Card>\n                </div>\n            )\n        }\n        return datalinesrender\n    }\n    render() {\n\n        return (\n            <Box>\n                {this.initlines()}\n                {this.getmaxid()}\n                <Button sx={{width:300}} startIcon={<AddCircleIcon/>} onClick={()=>this.setState({open:true})}/>\n                <Dialog open={this.state.open} alignItems=\"center\">\n                    <DialogTitle>Add a Task</DialogTitle>\n                    <DialogContentText >To add a new Task please fill the fields below</DialogContentText>\n                    <DialogContent>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Task:\n                            <TextField required type=\"text\" value={this.state.value} onChange={(e)=>this.setState({value: e.target.value})} />\n                            Description:\n                            <TextField type=\"text\" value={this.state.value2} onChange={(e)=>this.setState({value2: e.target.value})} />\n                        </label>\n                        <div> <Button onClick={()=>this.setState({open:false})}>Cancel</Button><Button type=\"submit\" variant=\"text\" value=\"Submit\">Add</Button></div>\n                    </form>\n                    </DialogContent>\n                </Dialog>\n                {this.renderdatalines()}\n            </Box>\n        );\n    }\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            numberOfprojects:0,\n            projectArray:Array(3).fill(''),\n            maxprojectsnumber:10,\n            init:false,\n            maxid:0\n        }\n    }\n\n    fetchcolumn(i){\n        const item={\n            ID:i,\n            TodoItems:null,\n        }\n        fetch('api/columns', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        })\n            .then(response => response.json())\n            .catch(error => console.error('Unable to add item.', error))\n    }\n\n    addProject(dx){\n        let projects= []\n        for(let j=0;j<this.state.numberOfprojects;j++){\n            projects.push(this.state.projectArray[j])\n        }\n        projects.push(\n            <Grid item xs={12} md={3}>\n                    <ProjectBox value={(dx+1)} />\n            </Grid>\n\n            )\n        this.fetchcolumn(dx+1)\n        this.setState({\n            projectArray:projects,\n            numberOfprojects:this.state.numberOfprojects+1\n        })\n    }\n    addProjectwithoutfetch(dx){\n        let projects= []\n        for(let j=0;j<this.state.numberOfprojects;j++){\n            projects.push(this.state.projectArray[j])\n        }\n        projects.push(\n            <Grid item xs={12} md={3}>\n                <ProjectBox value={(dx+1)} />\n            </Grid>\n\n        )\n        this.setState({\n            projectArray:projects,\n            numberOfprojects:this.state.numberOfprojects+1\n        })\n    }\n    clearProjects(){\n        this.deletealltodos()\n        this.setState({\n            projectArray:Array(0),\n        })\n    }\n\n    addlist(data){\n            for (var k = 0; k < data.length; k++) {\n                this.addProjectwithoutfetch(k);\n            }\n    }\n    initcolumns(){\n        if(this.state.init===false) {\n            this.setState({init:true})\n            const uri = '/api/columns';\n                fetch(uri)\n                    .then(response => response.json())\n                    .then(data => this.addlist(data))\n                    .catch(error => console.error('Unable to get items.', error));\n        }\n    }\n\n    maxid(data){\n        let dx=0;\n        for(let k=0;k<data.length;k++){\n            dx=data[k].id\n        }\n        this.setState({\n            maxid:dx,\n        })\n        for(let l=1;l<=dx;l++){\n            this.deletetodo(l)\n        }\n        for(let h=1;h<=this.state.numberOfprojects;h++){\n            this.deletecolumns(h)\n        }\n        this.setState({numberOfprojects:0})\n    }\n\n    deletecolumns(h){\n        fetch(\"/api/columns/\"+h, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n    }\n    deletetodo(id){\n        fetch(\"/api/todoitems/\"+id, {\n            method: 'DELETE'\n        })\n            .catch(error => console.error('Unable to delete item.', error));\n    }\n    deletealltodos(){\n        const uri = '/api/todoitems';\n        fetch(uri)\n            .then(response => response.json())\n            .then(data => this.maxid(data))\n            .catch(error => console.error('Unable to get items.', error));\n    }\n\n\n    render() {\n        return (\n            <div >\n                <Box >\n                    <Grid container spacing={2}>\n                        {this.initcolumns()}\n                        {this.state.projectArray}\n                        <Grid item xs={12} md={3}>\n                            <Button variant=\"text\" onClick={()=>this.addProject(this.state.numberOfprojects)}> Add Project</Button>\n                            <Button variant=\"text\" onClick={()=>this.clearProjects()}> Clear Projects</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n\n\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Main />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}